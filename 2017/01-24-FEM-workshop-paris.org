* How to fill a day

** Abstract

Solving PDEs with Firedrake

Firedrake is a Python package for the automated solution of partial
differential equations via the finite element method.  Users write
their problems in Python using the FEniCS language to specify the
finite element problem they wish to solve.  This results in compact
code that is close to the mathematical formulation of the problem.
The resulting code runs transparently in serial on a laptop and using
thousands of cores on a supercomputer with MPI parallelism.

Firedrake supports a wide range of finite element families on both
simplex and tensor-product cells, and has special support for solving
problems in high aspect ratio domains (as often appear in geophysical
applications, such as ocean and atmosphere modelling).  For the
solution of the discrete linear and nonlinear problems, it interfaces
tightly with the PETSc library, giving access to a wide suite of
composable algebraic solvers.

In this tutorial, we will learn how to start using Firedrake for
solving finite element problems.  We will start with an overview of
the available features and then dive straight in to solving problems,
ranging from simple stationary examples through to more complex
coupled systems.

Since writing down the model is normally reasonably straightforward,
we will spend some time exploring how to configure the algebraic
solvers from PETSc.  Particularly preconditioning of coupled systems
using PETSc's fieldsplit preconditioning schemes.

One of Firedrake's strengths is that it exposes the symbolic
information in the model to manipulation by other computer programs,
and a very successful example of this is the dolfin-adjoint project
which can automatically derive the discrete adjoint of models written
using the FEniCS language.  We will show some time-dependent examples.

The tutorial will be quite hands-on, and attendees are of course
welcome to bring their own problems to try and implement in Firedrake.


** Installation

* Firedrake installation

** Supported platforms

*** MacOS

Installation is regularly tested on MacOS, we use Homebrew
(http://brew.sh/) to provide necessary system-level dependencies.

*** Ubuntu

Installation is also regularly tested on Ubuntu (14.04 and 16.04).  We
use apt to provide necessary system-level dependencies.

*** Other Linux systems

Installation should work on other Linux systems, however, we do not
automatically install necessary dependent packages.  The installation
script will tell you what these are.

** Installing Firedrake

The simple way to install Firedrake is to use our install script:

  curl -O https://raw.githubusercontent.com/firedrakeproject/firedrake/master/scripts/firedrake-install
  python firedrake-install

This will install Firedrake in a virtualenv
(https://virtualenv.pypa.io/) created in a "firedrake" subdirectory of
the current directory.  Run:

  python firedrake-install --help

For a full list of supported installation options.  The default
installation options will be sufficient for this workshop.

*** Testing the installation

If everything went well, you will be able to activate the virtualenv.
You can test the installation by running the Firedrake test suite:

  cd firedrake/src/firedrake
  make alltest

** Troubleshooting

If the installation failed for some reason, please let us know and we
will try and work through any problems.  Please post any issues as a
comment on this github issue:
https://github.com/firedrakeproject/firedrake/issues/976

If you are unable to install Firedrake before arriving at the
workshop, do not worry, we will dedicate some time in the morning of
our session to debugging and fixing any final install problems.  As a
fallback, we will also provide a virtualbox image on the day.


** Morning session

*** Debugging installation problems

(Runs concurrently with actual material)

*** Meshes (builtin and external) [LM]

- Boundary markers

*** Function spaces [MH]

- Scalar/Vector/Tensor/Mixed

*** UFL introduction [LM]

- Test and Trial functions

- defining forms

*** Coefficients and operators [TG]

- assembling 1- and 2-forms.

- matrix types (?)

*** First steps (Helmholtz problem) [TG]
*** Boundary conditions (strong) [DH]


*** Nonlinear problem (nonlinear Poisson?) [MH]

*** Solver objects [LM]

*** Timestepping [DH]


** Firedrake intro/overview

*** Installation

*** Python

*** Concepts

*** Composability


** Features

*** Extruded meshes

*** Tensor product finite elements

*** Code generation

*** Parallel

** Simple demos

*** Building matrices and vectors

*** Poisson hello world

*** Playing with solver configurations

*** Time dependent problems

- building solver objects up front

** More complex demos

*** Composable preconditioners

*** Matrix free

*** Multigrid

** Firedrake apps

*** Thetis examples

*** Gusto examples?
