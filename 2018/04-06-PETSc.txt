PDEs: it should be the solver's problem

Many optimal solvers for PDEs require access to auxiliary operators,
or compositions thereof, over and above what is easily offered by
PETSc's Amat, Pmat interface.  Although possible, setting things up
"by hand" is tricky, error prone, and requires changing to compare the
performance of different solver options.  This is especially the case
when we wish to provide problem-specific data deep in some nested
solver.

In this talk, I will describe how we address some of these problems in
Firedrake, by augmenting operators (and hence preconditioners) with
the ability to provide auxiliary operators as needed.  By more tightly
coupling the PDE library with the linear algebra, we can make solvers
problem- and discretisation-aware.

Recently, we have taken this approach to develop a very flexible
framework for domain-decomposition preconditioning, utilising DMPlex
to define topological patches, and the auxiliary information to
provide operator assembly.  Most of this is not specific to Firedrake,
and so the question naturally arises as to how to develop
discretisation- and problem-aware preconditioning infrastructure that
can live in PETSc, yet be usable by the plethora of PDE libraries in
the wider community.  I do not have the answer to this question, but
am hopeful of useful discussion.
